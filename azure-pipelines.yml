# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
  - stage: 
    jobs:
    - job: 
      steps:
        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: 'azuredevops'
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: |
        #       az group create -n azure-aks -l centralindia
        #       az keyvault create --name "azurekey-valut" --resource-group "azure-aks" --location "centralindia" --query "id" -o tsv
        #       az storage account create --resource-group azure-aks --name azuresa8768 --sku Standard_LRS --encryption-services blob
        #       az storage container create --name azure-sa --account-name azuresa8768 --auth-mode login
        
        # - task: TerraformInstaller@1
        #   inputs:
        #     terraformVersion: 'latest'
        # - task: TerraformTaskV4@4
        #   inputs:
        #     provider: 'azurerm'
        #     command: 'init'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
        #     backendServiceArm: 'azuredevops'
        #     backendAzureRmResourceGroupName: 'azure-aks'
        #     backendAzureRmStorageAccountName: 'azuresa8768'
        #     backendAzureRmContainerName: 'azure-sa'
        #     backendAzureRmKey: 'azure-sakey'
        # - task: TerraformTaskV4@4
        #   inputs:
        #     provider: 'azurerm'
        #     command: 'plan'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
        #     environmentServiceNameAzureRM: 'azuredevops'
        
        # - task: TerraformTaskV4@4
        #   inputs:
        #     provider: 'azurerm'
        #     command: 'apply'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
        #     environmentServiceNameAzureRM: 'azuredevops'
            
        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: 'azuredevops'
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: 'az network public-ip create --resource-group MC_aks-azure_aks-cluster_centralindia --name myAKSPublicIP --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv'
        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: 'azuredevops'
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: |
        #       az network dns zone create -g aks-azure -n aanvysodtware.info
        #       az network dns record-set a add-record -g aks-azure -z aanvysodtware.info -n aanvysodtware.info -a 20.197.31.3
        #       az aks get-credentials --name aks-cluster --resource-group aks-azure
        
        # - task: HelmInstaller@0
        #   inputs:
        #     helmVersion: '3.4.0'
        #     installKubectl: true
        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'create'
        # - task: Bash@3
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        #       helm repo update

        # - task: HelmDeploy@0
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceConnection: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'install'
        #     chartType: 'Name'
        #     chartName: 'ingress-nginx/ingress-nginx'
        #     arguments: '--set controller.replicaCount=2 --set controller.nodeSelector."kubernetes\.io/os"=linux --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux --set controller.service.loadBalancerIP=20.197.31.3'

        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: 'azuredevops'
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: |
        #       IP="20.197.31.3"
        #       DNSLABEL="azuredevops"
        #       PUBLICIPID=$(az network public-ip list --query "[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]" --output tsv)
        #       az network public-ip update --ids $PUBLICIPID --dns-name $DNSLABEL
        #       az network public-ip show --ids $PUBLICIPID --query "[dnsSettings.fqdn]" --output tsv

        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: 'azuredevops'
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: 'kubectl label namespace ingress-basic cert-manager.io/disable-validation=true'

        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'apply'
        #     arguments: '-f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.crds.yaml'

        # - task: Bash@3
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       helm repo add jetstack https://charts.jetstack.io
        #       helm repo update

        # - task: HelmDeploy@0
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceConnection: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'install'
        #     chartType: 'Name'
        #     chartName: 'jetstack/cert-manager'
        #     arguments: '--version v1.12.0'

        # - task: CopyFiles@2
        #   inputs:
        #     SourceFolder: '$(Build.SourcesDirectory)'
        #     Contents: '**/*.yaml'
        #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
        
        # - task: PublishBuildArtifacts@1
        #   inputs:
        #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        #     ArtifactName: 'drop'
        #     publishLocation: 'Container'
        
        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'apply'
        #     useConfigurationFile: true
        #     configuration: '$(System.DefaultWorkingDirectory)/_guntupalliramanaidu/drop/aks-helloworld-one.yaml'
        
        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'apply'
        #     useConfigurationFile: true
        #     configuration: '$(System.DefaultWorkingDirectory)/_guntupalliramanaidu/drop/aks-helloworld-two.yaml'
        
        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'apply'
        #     useConfigurationFile: true
        #     configuration: '$(System.DefaultWorkingDirectory)/_guntupalliramanaidu/drop/cluster-issuer.yaml.yaml'
        
        # - task: Kubernetes@1
        #   inputs:
        #     connectionType: 'Kubernetes Service Connection'
        #     kubernetesServiceEndpoint: 'kubernetes'
        #     namespace: 'ingress-basic'
        #     command: 'apply'
        #     useConfigurationFile: true
        #     configuration: '$(System.DefaultWorkingDirectory)/_guntupalliramanaidu/drop/hello-world-ingress.yaml.yaml'